import fs from "fs"

const puzzle = fs.readFileSync('./day05/trial.txt').toString('utf-8').split('\n\n')
const first_list = puzzle[0]
const second_list = puzzle[1]

interface Iobj extends Object{
    [fronter: number] : number[]
}
const obj: Iobj = {}
first_list
.split('\n')
.forEach((ele) => Object
	 .keys(obj)
	 .includes(splitList(ele, 0).toString())
	     ? obj[splitList(ele, 0)].push(splitList(ele, 1)) 
	     : obj[splitList(ele, 0)] = [splitList(ele, 1)])

const s =second_list
.split('\n')
.map((ele) => stringToNumArr(ele))

const includesOrNah = s.map((ele) => 
    ele.map((ele1, ind) => 
	    ele.every((ele2, ind1) => 
		      (Object.hasOwn(obj, ele1) &&
		       obj[ele1]?.includes(ele2) 
		      ) ||
			  (ind1 <= ind && ele.length > 1)
		     ) ? ele.at(Math.floor(ele.length/2))
			 : 0

	   )).filter((ele) => !ele.includes(0)) ?? [[0]]
	   .map((ele)=> ele[0]).reduce((acc, ele) => acc+ele || 0, 0)
	   console.log('incluesOrNah', includesOrNah)



function splitList (ele:string, ind:number): number{
    return +ele.split('|')[ind];
}

function stringToNumArr (ele: string) {
    return ele.split(',').map((ele1) => +ele1)
}
